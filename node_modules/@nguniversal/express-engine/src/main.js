"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var core_1 = require("@angular/core");
var compiler_1 = require("@angular/compiler");
var platform_server_1 = require("@angular/platform-server");
var file_loader_1 = require("./file-loader");
var tokens_1 = require("./tokens");
/**
 * This holds a cached version of each index used.
 */
var templateCache = {};
/**
 * Map of Module Factories
 */
var factoryCacheMap = new Map();
/**
 * This is an express engine for handling Angular Applications
 */
function ngExpressEngine(setupOptions) {
    var compilerFactory = platform_server_1.platformDynamicServer().injector.get(core_1.CompilerFactory);
    var compiler = compilerFactory.createCompiler([
        {
            providers: [
                { provide: compiler_1.ResourceLoader, useClass: file_loader_1.FileLoader }
            ]
        }
    ]);
    return function (filePath, options, callback) {
        options.providers = options.providers || [];
        try {
            var moduleOrFactory = options.bootstrap || setupOptions.bootstrap;
            if (!moduleOrFactory) {
                throw new Error('You must pass in a NgModule or NgModuleFactory to be bootstrapped');
            }
            setupOptions.providers = setupOptions.providers || [];
            var extraProviders_1 = setupOptions.providers.concat(options.providers, getReqResProviders(options.req, options.res), [
                {
                    provide: platform_server_1.INITIAL_CONFIG,
                    useValue: {
                        document: getDocument(filePath),
                        url: options.req.originalUrl
                    }
                }
            ]);
            getFactory(moduleOrFactory, compiler)
                .then(function (factory) {
                return platform_server_1.renderModuleFactory(factory, {
                    extraProviders: extraProviders_1
                });
            })
                .then(function (html) {
                callback(null, html);
            }, function (err) {
                callback(err);
            });
        }
        catch (err) {
            callback(err);
        }
    };
}
exports.ngExpressEngine = ngExpressEngine;
/**
 * Get a factory from a bootstrapped module/ module factory
 */
function getFactory(moduleOrFactory, compiler) {
    return new Promise(function (resolve, reject) {
        // If module has been compiled AoT
        if (moduleOrFactory instanceof core_1.NgModuleFactory) {
            resolve(moduleOrFactory);
            return;
        }
        else {
            var moduleFactory = factoryCacheMap.get(moduleOrFactory);
            // If module factory is cached
            if (moduleFactory) {
                resolve(moduleFactory);
                return;
            }
            // Compile the module and cache it
            compiler.compileModuleAsync(moduleOrFactory)
                .then(function (factory) {
                factoryCacheMap.set(moduleOrFactory, factory);
                resolve(factory);
            }, (function (err) {
                reject(err);
            }));
        }
    });
}
/**
 * Get providers of the request and response
 */
function getReqResProviders(req, res) {
    var providers = [
        {
            provide: tokens_1.REQUEST,
            useValue: req
        }
    ];
    if (res) {
        providers.push({
            provide: tokens_1.RESPONSE,
            useValue: res
        });
    }
    return providers;
}
/**
 * Get the document at the file path
 */
function getDocument(filePath) {
    return templateCache[filePath] = templateCache[filePath] || fs.readFileSync(filePath).toString();
}
//# sourceMappingURL=main.js.map